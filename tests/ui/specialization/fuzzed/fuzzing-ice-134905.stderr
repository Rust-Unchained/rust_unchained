warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes
  --> $DIR/fuzzing-ice-134905.rs:3:12
   |
LL | #![feature(specialization)]
   |            ^^^^^^^^^^^^^^
   |
   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information
   = help: consider using `min_specialization` instead, which is more stable and complete
   = note: `#[warn(incomplete_features)]` on by default

error[E0277]: the trait bound `(): Valid` is not satisfied
  --> $DIR/fuzzing-ice-134905.rs:12:23
   |
LL |     default type Ty = ();
   |                       ^^ the trait `Valid` is not implemented for `()`
   |
help: this trait has no implementations, consider adding one
  --> $DIR/fuzzing-ice-134905.rs:21:1
   |
LL | trait Valid {}
   | ^^^^^^^^^^^
note: required by a bound in `Iterate::Ty`
  --> $DIR/fuzzing-ice-134905.rs:6:14
   |
LL |     type Ty: Valid;
   |              ^^^^^ required by this bound in `Iterate::Ty`

error[E0277]: can't compare `T` with `T`
  --> $DIR/fuzzing-ice-134905.rs:17:20
   |
LL | impl<'a, T> Eq for T where <T as Iterate<'a>>::Ty: Valid {}
   |                    ^ no implementation for `T == T`
   |
note: required by a bound in `Eq`
  --> $SRC_DIR/core/src/cmp.rs:LL:COL
help: consider further restricting type parameter `T` with trait `PartialEq`
   |
LL | impl<'a, T> Eq for T where <T as Iterate<'a>>::Ty: Valid, T: std::cmp::PartialEq {}
   |                                                         ++++++++++++++++++++++++

error[E0277]: the trait bound `T: Check` is not satisfied
  --> $DIR/fuzzing-ice-134905.rs:17:52
   |
LL | impl<'a, T> Eq for T where <T as Iterate<'a>>::Ty: Valid {}
   |                                                    ^^^^^ the trait `Check` is not implemented for `T`
   |
note: required for `T` to implement `Iterate<'a>`
  --> $DIR/fuzzing-ice-134905.rs:8:13
   |
LL | impl<'a, T> Iterate<'a> for T
   |             ^^^^^^^^^^^     ^
LL | where
LL |     T: Check,
   |        ----- unsatisfied trait bound introduced here
help: consider further restricting type parameter `T` with trait `Check`
   |
LL | impl<'a, T> Eq for T where <T as Iterate<'a>>::Ty: Valid, T: Check {}
   |                                                         ++++++++++

error: aborting due to 3 previous errors; 1 warning emitted

For more information about this error, try `rustc --explain E0277`.
